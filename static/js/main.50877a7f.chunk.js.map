{"version":3,"sources":["App.js","registerServiceWorker.js","index.js"],"names":["App","props","state","rSelected","pdfFileRawLong","pdfFileRawShort","pdfFileRaw","onRadioBtnClick","bind","ReactGA","initialize","pageview","window","location","pathname","search","this","setState","console","log","Container","className","Row","id","ButtonGroup","Button","color","onClick","active","data","process","width","height","Component","Boolean","hostname","match","ReactDOM","render","url","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qRAmEeA,E,kDA1Db,WAAaC,GAAQ,IAAD,8BAClB,cAAMA,IACDC,MAAQ,CAAEC,UAAW,QAC1BC,eAAgB,uBAChBC,gBAAiB,oBACjBC,WAAY,qBACZ,EAAKC,gBAAkB,EAAKA,gBAAgBC,KAArB,gBAEvBC,IAAQC,WAAW,kBACnBD,IAAQE,SAASC,OAAOC,SAASC,SAAWF,OAAOC,SAASE,QAT1C,E,qDAYpB,c,6BAGA,SAAgBZ,GAAY,IAAD,OACzBa,KAAKC,SAAS,CAAEd,UAAYA,IACV,UAAdA,EACFa,KAAKC,SAAU,CAACX,WAAYU,KAAKd,MAAMG,kBAAkB,SAAAJ,GACrDiB,QAAQC,IAAI,EAAKjB,MAAMI,eAEJ,SAAdH,GACTa,KAAKC,SAAU,CAACX,WAAYU,KAAKd,MAAME,iBAAiB,SAAAH,GACpDiB,QAAQC,IAAI,EAAKjB,MAAMI,iB,oBAK/B,WAAU,IAAD,OACP,OACE,cAACc,EAAA,EAAD,UACE,sBAAKC,UAAU,MAAf,UACE,mBAAGA,UAAU,cACb,qBAAKA,UAAU,WAAf,SACA,cAACC,EAAA,EAAD,UACE,qBAAKC,GAAG,aAAR,SACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAQC,MAAM,UAAUC,QAAS,kBAAM,EAAKpB,gBAAgB,UAAUqB,OAAiC,UAAzBZ,KAAKd,MAAMC,UAAzF,mBACA,cAACsB,EAAA,EAAD,CAAQC,MAAM,UAAUC,QAAS,kBAAM,EAAKpB,gBAAgB,SAASqB,OAAiC,SAAzBZ,KAAKd,MAAMC,UAAxF,2BAKN,cAACmB,EAAA,EAAD,UACE,qBAAKC,GAAG,iBAAR,SACE,wBAAQM,KAAMC,8DAAmGd,KAAKd,MAAMI,WAAYyB,MAAM,OAAOC,OAAO,MAA5J,qC,GA9CIC,aCEEC,QACW,cAA7BtB,OAAOC,SAASsB,UAEe,UAA7BvB,OAAOC,SAASsB,UAEhBvB,OAAOC,SAASsB,SAASC,MACvB,2D,MCRNC,IAASC,OAAO,cAAC,EAAD,CAAKC,IAAI,yBAA0BC,SAASC,eAAe,SDuGrE,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.50877a7f.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './App.css';\n\nimport { Container, Row, } from 'reactstrap';\nimport { Button, ButtonGroup } from 'reactstrap';\nimport ReactGA from 'react-ga';\n\nclass App extends Component {\n  constructor (props) {\n    super(props);\n    this.state = { rSelected: \"Short\",\n    pdfFileRawLong: \"ManasTalukdar_cv.pdf\",\n    pdfFileRawShort: \"ManasTalukdar.pdf\",\n    pdfFileRaw: \"ManasTalukdar.pdf\" };\n    this.onRadioBtnClick = this.onRadioBtnClick.bind(this);\n\n    ReactGA.initialize('UA-118888630-2');\n    ReactGA.pageview(window.location.pathname + window.location.search);\n  }\n\n  componentDidMount() { \n  }\n\n  onRadioBtnClick(rSelected) {\n    this.setState({ rSelected:  rSelected});\n    if (rSelected === \"Short\") {\n      this.setState( {pdfFileRaw: this.state.pdfFileRawShort}, props => {\n          console.log(this.state.pdfFileRaw);\n      });\n    } else if (rSelected === \"Long\") {\n      this.setState( {pdfFileRaw: this.state.pdfFileRawLong}, props => {\n          console.log(this.state.pdfFileRaw);\n      });\n    }\n  }\n\n  render() {\n    return (\n      <Container>\n        <div className=\"App\">\n          <p className=\"App-intro\"/>\n          <div className=\"App-body\">\n          <Row>\n            <div id=\"resumeType\">\n              <ButtonGroup>\n                <Button color=\"primary\" onClick={() => this.onRadioBtnClick(\"Short\")} active={this.state.rSelected === \"Short\"}>Short</Button>\n                <Button color=\"primary\" onClick={() => this.onRadioBtnClick(\"Long\")} active={this.state.rSelected === \"Long\"}>Long</Button>\n              </ButtonGroup>\n            </div>\n          </Row>\n          </div>\n          <Row>\n            <div id=\"pdfjsContainer\">\n              <object data={process.env.PUBLIC_URL + '/pdfjs/web/viewer.html?file=' + process.env.PUBLIC_URL + '/resources/' + this.state.pdfFileRaw} width=\"100%\" height=\"600\">PDF resume</object>\n            </div>\n          </Row>\n        </div>      \n      </Container>\n    );\n  }\n}\n\nApp.propTypes = {\n  url: PropTypes.string, \n};\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { unregister } from './registerServiceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App url='ManasTalukdar_cv.pdf'/>, document.getElementById('root'));\nunregister();\n"],"sourceRoot":""}